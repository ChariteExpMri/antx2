%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This script reads in DTI parameter maps generated by Bruker Paravision
% and converts them into NIFTI data format
%  
% Usage: call dti_pv2nifti.m from the MATLAB command window 
%
%

%% ==== Initialize ========================================================
% Add paths to needed functions to MATLAB search path

addpath('/Users/philippbohm-sturm/Documents/MATLAB/nii');
addpath('/Users/philippbohm-sturm/Documents/MATLAB/pvtools_custom');
addpath('/Users/philippbohm-sturm/Documents/MATLAB/pvtools_bruker');
addpath(genpath('/Users/philippbohm-sturm/Documents/MATLAB/pvtools_bruker'));


% Ask for 2dseq file
[FileName_2dseq,PathName_2dseq] = uigetfile('2dseq.*','Select the Bruker 2dseq file');
if ~exist([PathName_2dseq '2dseq'])
    error('2dseq Bruker file not found in selected directory')
end
if ~exist([PathName_2dseq 'visu_pars'])
    error('visu_pars Bruker file not found in selected directory')
end
    
path_to_2dseq=fullfile(PathName_2dseq,'2dseq');    


PathName_2dseq = fileparts(path_to_2dseq);
Visu=readBrukerParamFile(fullfile(PathName_2dseq,'visu_pars'));
image_2dseq_temp=readBruker2dseq(path_to_2dseq,Visu); 

% Bruker reader contains flaw, so own reader is used
image_2dseq=zeros(size(image_2dseq_temp,1),size(image_2dseq_temp,2),Visu.VisuCoreFrameCount);

for i=1:Visu.VisuCoreFrameCount
    image_2dseq(:,:,i)=read2dseq_unscaled(PathName_2dseq,size(image_2dseq_temp,1),size(image_2dseq_temp,2),i,'int32').*Visu.VisuCoreDataSlope(i)...
        +Visu.VisuCoreDataOffs(i);
end

image_2dseq=reshape(image_2dseq,size(image_2dseq_temp));

% Ask for directory to store the data

PathName_save = uigetdir(PathName_2dseq,'Select the directory to store NIFTI data');


filenameExtensions=struct('FA','_fa','MD','_md',...
    'Da','_da','Dr','_dr','Nifti','.nii');

%====Generate NIFTI files and store them in directory==========

% Extract header info for NIFTI storage
voxelsize_2dseq=[Visu.VisuCoreExtent./Visu.VisuCoreSize Visu.VisuCoreFrameThickness];

% Make sure it is a processed DTI dataset
if strcmp(Visu.VisuSeriesTypeId,'DERIVED_DTI')~=1
    warning('VisuSeriesTypeId does not match that for processed DTI data');
end

% Find the frames that correspond to FA, Trace, and Eigenvalues L1, L2, L3
frameFa =find(ismember(Visu.VisuFGElemId(:),'DTI_FA'));
frameTrace =find(ismember(Visu.VisuFGElemId(:),'DTI_TRACE'));
frameL1 =find(ismember(Visu.VisuFGElemId(:),'DTI_L1'));
frameL2 =find(ismember(Visu.VisuFGElemId(:),'DTI_L2'));
frameL3 =find(ismember(Visu.VisuFGElemId(:),'DTI_L3'));



allMaps=squeeze(image_2dseq);
if length(size(allMaps))<4
    warning('2D data currently not fully supported. Double check the stored maps.')
end

faImage=squeeze(allMaps(:,:,frameFa,:));
traceImage=squeeze(allMaps(:,:,frameTrace,:));
l1Image=squeeze(allMaps(:,:,frameL1,:));
l2Image=squeeze(allMaps(:,:,frameL2,:));
l3Image=squeeze(allMaps(:,:,frameL3,:));

% Calculate mean, axial and radial diffusivity maps
mdImage=traceImage;
daImage=l1Image;
drImage=(l2Image+l3Image)./2;

clear l1Image l2Image l3Image traceImage;

% Convert the extracted images to Nifti and store
allMaps_nii=make_nii(allMaps,voxelsize_2dseq);
faImage_nii=make_nii(faImage,voxelsize_2dseq);
mdImage_nii=make_nii(mdImage,voxelsize_2dseq);
daImage_nii=make_nii(daImage,voxelsize_2dseq);
drImage_nii=make_nii(drImage,voxelsize_2dseq);

% Filenames
FileName_2dseq_base=[Visu.VisuSubjectId '_' num2str(Visu.VisuStudyNumber)...
    '_' num2str(Visu.VisuExperimentNumber) '_' num2str(Visu.VisuProcessingNumber)];
FileName_allMaps=fullfile(PathName_save,[FileName_2dseq_base filenameExtensions.Nifti]);
FileName_fa=fullfile(PathName_save,[FileName_2dseq_base filenameExtensions.FA filenameExtensions.Nifti]);
FileName_md=fullfile(PathName_save,[FileName_2dseq_base filenameExtensions.MD filenameExtensions.Nifti]);
FileName_da=fullfile(PathName_save,[FileName_2dseq_base filenameExtensions.Da filenameExtensions.Nifti]);
FileName_dr=fullfile(PathName_save,[FileName_2dseq_base filenameExtensions.Dr filenameExtensions.Nifti]);

% Store
display(['saving ' FileName_allMaps]);
save_nii(allMaps_nii,FileName_allMaps);

display(['saving ' FileName_fa]);
save_nii(faImage_nii,FileName_fa);

display(['saving ' FileName_md]);
save_nii(mdImage_nii,FileName_md);

display(['saving ' FileName_da]);
save_nii(daImage_nii,FileName_da);

display(['saving ' FileName_dr]);
save_nii(drImage_nii,FileName_dr);

clear;
