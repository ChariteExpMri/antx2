
%% create slicewise Jacobian Determinants (JD_2d.nii)
% -optional: create 3d-volume of all JD's  ("JD2d.nii") <--a reference Image has to be selected to define the origin
% #r please select the respective MOUSE-folders in the ANT-main gui before executing this function
%
%% #ky FUNCTION INPUTS
% showgui: (optional)  :  0/1   :no gui/gui
% x      : (optional)  : struct with one/more parameters 
% 
%% #ky PARAMETERS
% ..see batch examples..
% 
%% #ky BATCH EXAMPLE
%% generate 2d-JD's 
% z=[];                                                                                                                                            
% z.dir2D     = 'ELX2d';                         % % name of the main directory containing slicewise 2d registrations                             
% z.trafofile = 'TransformParameters.1.txt';     % % name of the last transformationParameterfile(txt)                                                                                            
% z.make3dVol = [0];                             % % do not create a 3d-volume using all 2d-JD's 
% xmakeJD_2d(1,z);                               % % GUI
% 
%% generate 2d-JD's and generate a 3d-volume ("JD2d.nii") using the refIMG
% z=[];                                                                                                                                            
% z.dir2D     = 'ELX2d';                         % % name of the main directory containing slicewise 2d registrations                             
% z.trafofile = 'TransformParameters.1.txt';     % % name of the last transformationParameterfile(txt)                                             
% z.make3dVol = [1];                             % % create 3d-volume using all 2d-JD's (NOTE!! "refIMG" for setting the origin has to be selected)
% z.refIMG    = { 'pf_avepi_mre_2.nii' };        % % SELECT REFERENCE IMAGE                                        
% xmakeJD_2d(1,z);                               % % GUI  
% 
%% same as above bot another REF-image
% z=[];                                                                                                                                            
% z.dir2D     = 'ELX2d';                         % % name of the main directory containing slicewise 2d registrations                             
% z.trafofile = 'TransformParameters.1.txt';     % % name of the last transformationParameterfile(txt)                                             
% z.make3dVol = [1];                             % % create 3d-volume using all 2d-JD's (NOTE!! "refIMG" for setting the origin has to be selected)
% z.refIMG    = { 't2.nii' };                    % % SELECT REFERENCE IMAGE                                                
% xmakeJD_2d(0,z);                               % % no GUI

function xmakeJD_2d(showgui,x,pa)


%———————————————————————————————————————————————
%%   example
%———————————————————————————————————————————————
if 0
 
    
end


global an
% prefdir=fileparts(an.datpath);
if exist('pa')==1
    if isempty(pa);
       pa=antcb('getsubjects'); 
    end
    if ischar(pa); pa=cellstr(pa); end
else
    pa=antcb('getsubjects');
end




%———————————————————————————————————————————————
%%   PARAMS
%———————————————————————————————————————————————
if exist('showgui')==0 || isempty(showgui) ;    showgui=1                ;end
if exist('x')==0                           ;    x=[]                     ;end
% if exist('pa')==0      || isempty(pa)      ;    pa=antcb('getsubjects')  ;end

% if ischar(pa);                      pa=cellstr(pa);   end
if isempty(x) || ~isstruct(x)  ;  %if no params spezified open gui anyway
    showgui  =1   ; 
    x=[]          ;
end 

% v=getuniquefiles(pa);
 [~,~, v]=antcb('getuniquefiles',pa) ;


%••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
%%  PARAMETER-gui
%••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
if exist('x')~=1;        x=[]; end


p={...
    'inf98'      '*** Generate Jacobian Determinant 2d                '                         '' ''
    'inf99'      'The JD generated by elastix, ist stored the respective slicewise dirs in the 2d-subdir  ' '' ''
    'inf100'     '-------------------------------'                          '' ''
    'dir2D'       ['ELX2d']    'name of the main directory containing slicewise 2d registrations '      ''
    'trafofile'   ['TransformParameters.1.txt']    'name of the last transformationParameterfile(txt) '      ''
    'inf101'     '-----[OPTIONAL]--------------------------'      '' '' 
    'make3dVol'  [1]    'create 3d-volume using all 2d-JD''s (NOTE!! "refIMG" for setting the origin has to be selected)' 'b'
    'refIMG'      {''}  'select REFERENCE IMAGE (example: t2.nii) to obtain the origin'  {@selectfile,v,'single'}
    %'renamestring'   ''    'renamefile to (without extention)'             '' 
    };

p=paramadd(p,x);%add/replace parameter
%     [m z]=paramgui(p,'uiwait',0,'close',0,'editorpos',[.03 0 1 1],'figpos',[.2 .3 .7 .5 ],'title','PARAMETERS: LABELING');

% %% show GUI

if showgui==1
    [m z ]=paramgui(p,'uiwait',1,'close',1,'editorpos',[.03 0 1 1],'figpos',[.15 .3 .8 .3 ],...
        'title',['PARAMETERS: ' mfilename],'info',{@uhelp, [mfilename '.m']});
    fn=fieldnames(z);
    z=rmfield(z,fn(regexpi2(fn,'^inf\d')));
else
    z=param2struct(p);
end


% return
%———————————————————————————————————————————————
%%   make batch
%———————————————————————————————————————————————
xmakebatch(z,p, [mfilename ]);

%———————————————————————————————————————————————
%%   process
%———————————————————————————————————————————————

disp('  ..generate JACOBIAN');
for i=1:size(pa,1) %# for each MOUSE
    
    pax  =pa{i};
    pax2d=fullfile(pax,z.dir2D);
    
    [~,pa2d] = spm_select('List',pax2d,'MM.*'); pa2d=cellstr(pa2d);
    if isempty(pa2d{1}); continue; end
    pa2d=pa2d(regexpi2(pa2d,'^i\d+.*_slice'));
    
    
    JDlist={};
    for j=1:size(pa2d,1) %# for each 2d-subdir
        pasl=fullfile(pax2d,pa2d{j} ); %slice wise path
        trafofile=fullfile(pasl,z.trafofile);
        
        JDlist(end+1,1)={fullfile(pasl,'JD2d.nii')};

        if exist(trafofile)==2
            f2= fullfile(pasl,'JD2d.nii'); %JD-name
            
            
            
            %the post-hoc directory-changing-PROBLEM in parameterfile
            trafofile0        =get_ix(trafofile,'InitialTransformParametersFileName');
            [pi0 fi0 ext0]    =fileparts(trafofile0);
            [pis fis ext]     =fileparts(trafofile);
            trafofile0current= fullfile( pis,[fi0 ext0]  );
            if strcmp(trafofile0,trafofile0current)~=1
                set_ix(trafofile,'InitialTransformParametersFileName',    trafofile0current);
                pause(.2);
            end
            
            %         [im4,tr4] = run_transformix(  [] ,[],trafofile, s.pa ,'jac');
            [logs,im4,tr4]=evalc(['run_transformix(  [] ,[],trafofile, pasl ,''jac'')']);
            movefile(tr4,f2,'f');
            
            %% set ix back to old
            if strcmp(trafofile0,trafofile0current)~=1
                set_ix(trafofile,'InitialTransformParametersFileName',    trafofile0);
            end
            
            %         disp([pnum(i,4) '] generated JD <a href="matlab: explorer('' ' fileparts(f2) '  '')">' f2 '</a>']);% show h<perlink
            disp([pnum(i,4) '].slicewise JD created <a href="matlab:explorerpreselect(''' f2 ''')">' f2 '</a>']);% show h<perlink
            
        end
        
    end% slicewise
    
 
    %% reconstruct 3d-volume
    if z.make3dVol==1
        if isempty(char(z.refIMG));      disp('..no refIMG selected >> no 3d volume created'); continue    ;    end
       refimg= fullfile(pax,char(z.refIMG));
       if exist(refimg)~=2;             disp(['..refIMG does not exist in mouseDir ['  pax '] >> no 3d volume created']); continue;       end
        
      ha= spm_vol(refimg);
      hj=ha;
      hj=rmfield(hj,'pinfo');
      hj.dt=[64 ha.dt(2)];
      
      s3=zeros(ha.dim);
      for sl=1:size(JDlist,1)
          [hs s]=rgetnii(JDlist{sl});
          s3(:,:,sl)=s;
      end
      outname=fullfile(pax,['JD2d.nii']);
      rsavenii(outname,hj,s3);
      disp([pnum(i,4) '] ## JD-3dvol created <a href="matlab:explorerpreselect(''' outname ''')">' outname '</a>']);% show
    end
    
    
end





function he=selectfile(v,selectiontype)
he=selector2(v.tb,v.tbh,...
    'out','col-1','selection',selectiontype);


% % % 
% % % 
% % % %••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
% % % %% subs
% % % %••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
% % % 
% % % function makebatch(z)
% % % 
% % % %••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
% % % 
% % % try
% % % hlp=help(mfilename);
% % % hlp=hlp(1:min(strfind(hlp,char(10)))-1);
% % % catch
% % %   hlp='';  
% % % end
% % % 
% % % hh={};
% % % hh{end+1,1}=('% ••••••••••••••••••••••••••••••••••••••••••••••••••••••');
% % % hh{end+1,1}=[ '% BATCH:        [' [mfilename '.m' ] ']' ];
% % % hh{end+1,1}=[ '% descr:' hlp];
% % % hh{end+1,1}=('% ••••••••••••••••••••••••••••••••••••••••••••••••••••••');
% % % hh=[hh; struct2list(z)];
% % % hh(end+1,1)={[mfilename '(' '1',  ',z' ')' ]};
% % % % disp(char(hh));
% % % % uhelp(hh,1);
% % % 
% % % try
% % % v = evalin('base', 'anth');
% % % catch
% % %     v={};
% % % assignin('base','anth',v);
% % % v = evalin('base', 'anth');
% % % end
% % % v=[v; hh; {'                '}];
% % % assignin('base','anth',v);
% % % 
% % % 
% % % 
