
%% #b generate Jacobian Determinant (JD.nii)
% this function is obsolete for the newer version (already implemented)
% for older version: warping must be done before
% pa: <optional> char/cell of mousefolder/s  otherwise mousefolder is used
% 
% example: single folder
% fo= O:\lesiondetection_svm\dat\s20150909_FK_C2M07_1_3_1
% xgenerateJacobian(1,struct('paramfile','elastixForward\TransformParameters.1.txt'),fo)



function xgenerateJacobian(showgui,x,pa)


%———————————————————————————————————————————————
%%   example
%———————————————————————————————————————————————
if 0
    %% example
    % ••••••••••••••••••••••••••••••••••••••••••••••••••••••
    % BATCH:        [ximportdir2dir.m]
    % descr:  import files from outerdir to mouse-dir via mouse-dir-name-correspondence
    % ••••••••••••••••••••••••••••••••••••••••••••••••••••••
    z.importIMG={ '2_T2_ax_mousebrain_1.nii'
        'MSME-T2-map_20slices_1.nii'
        'MSME-T2-map_20slicesmodified_1.nii'
        'nan_2.nii'
        'nan_3.nii' };
    ximportdir2dir(0,z)
    
    
end


global an
% prefdir=fileparts(an.datpath);
if exist('pa')==1
    if isempty(pa);
       pa=antcb('getsubjects'); 
    end
    if ischar(pa); pa=cellstr(pa); end
else
    pa=antcb('getsubjects');
end




%———————————————————————————————————————————————
%%   PARAMS
%———————————————————————————————————————————————
if exist('showgui')==0 || isempty(showgui) ;    showgui=1                ;end
if exist('x')==0                           ;    x=[]                     ;end
% if exist('pa')==0      || isempty(pa)      ;    pa=antcb('getsubjects')  ;end

% if ischar(pa);                      pa=cellstr(pa);   end
if isempty(x) || ~isstruct(x)  ;  %if no params spezified open gui anyway
    showgui  =1   ; 
    x=[]          ;
end 



%••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
%%  PARAMETER-gui
%••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
if exist('x')~=1;        x=[]; end


p={...
    'inf98'      '*** Generate Jacobian Determinant                 '                         '' ''
    'inf99'      'the transformationparamter-file(txt),generated by elastix, ist stored the mouse-subdir [elastixForward]' '' ''
    'inf100'     '-------------------------------'                          '' ''
    'paramfile'     ['elastixForward' filesep 'TransformParameters.1.txt']    'relative path of mouse-specific transformationParameterfile(txt) e.g. "elastixForward\TransformParameters.1.txt" '      ''
    %'renamestring'   ''    'renamefile to (without extention)'             '' 
    };

p=paramadd(p,x);%add/replace parameter
%     [m z]=paramgui(p,'uiwait',0,'close',0,'editorpos',[.03 0 1 1],'figpos',[.2 .3 .7 .5 ],'title','PARAMETERS: LABELING');

% %% show GUI

if showgui==1
    [m z ]=paramgui(p,'uiwait',1,'close',1,'editorpos',[.03 0 1 1],'figpos',[.15 .3 .8 .3 ],...
        'title','PARAMETERS: JACOBIAN DETERMINANT','info',{'sss'});
    fn=fieldnames(z);
    z=rmfield(z,fn(regexpi2(fn,'^inf\d')));
else
    z=param2struct(p);
end


% return


%———————————————————————————————————————————————
%%   ok-import that stuff
%———————————————————————————————————————————————

disp('  ..generate JACOBIAN');
for i=1:size(pa,1)
    
    trafofile=fullfile(pa{i},z.paramfile);
    
    if exist(trafofile)==2
        s.pa=pa{i};
        f2= fullfile(s.pa,'JD.nii'); %JD-name
        
        
        %the post-hoc directory-changing-PROBLEM in parameterfile
        trafofile0       =get_ix(trafofile,'InitialTransformParametersFileName');
        [pi0 fi0 ext0]    =fileparts(trafofile0);
        [pis fis ext]    =fileparts(trafofile);
        trafofile0current= fullfile( pis,[fi0 ext0]  );
        set_ix(trafofile,'InitialTransformParametersFileName',    trafofile0current);
        pause(.5);
        
        %         [im4,tr4] = run_transformix(  [] ,[],trafofile, s.pa ,'jac');
        [logs,im4,tr4]=evalc(['run_transformix(  [] ,[],trafofile, s.pa ,''jac'')']);
        movefile(tr4,f2,'f');
        
        %% set ix back to old
        set_ix(trafofile,'InitialTransformParametersFileName',    trafofile0);
        
        
%         disp([pnum(i,4) '] generated JD <a href="matlab: explorer('' ' fileparts(f2) '  '')">' f2 '</a>']);% show h<perlink
        disp([pnum(i,4) '] generated JD <a href="matlab:explorerpreselect(''' f2 ''')">' f2 '</a>']);% show h<perlink

        
        
%         %% jacobian——————————————————————————————————————————————
%         disp('  ..generate JACOBIAN');
%         trafofile=fullfile(s.pa,'elastixForward','TransformParameters.1.txt');
%         [im4,tr4] = run_transformix(  [] ,[],trafofile, s.pa ,'jac');
%         %  [logs,im4,tr4]=evalc(['run_transformix(  [] ,[],trafofile, s.pa ,''jac'')']);
%         movefile(tr4,fullfile(s.pa,'JD.nii'),'f');
        
    end
end


makebatch(z);



%••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
%% subs
%••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

function makebatch(z)

%••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

try
hlp=help(mfilename);
hlp=hlp(1:min(strfind(hlp,char(10)))-1);
catch
  hlp='';  
end

hh={};
hh{end+1,1}=('% ••••••••••••••••••••••••••••••••••••••••••••••••••••••');
hh{end+1,1}=[ '% BATCH:        [' [mfilename '.m' ] ']' ];
hh{end+1,1}=[ '% descr:' hlp];
hh{end+1,1}=('% ••••••••••••••••••••••••••••••••••••••••••••••••••••••');
hh=[hh; struct2list(z)];
hh(end+1,1)={[mfilename '(' '1',  ',z' ')' ]};
% disp(char(hh));
% uhelp(hh,1);

try
v = evalin('base', 'anth');
catch
    v={};
assignin('base','anth',v);
v = evalin('base', 'anth');
end
v=[v; hh; {'                '}];
assignin('base','anth',v);



