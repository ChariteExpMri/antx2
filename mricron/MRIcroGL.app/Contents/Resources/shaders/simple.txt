//pref
ambient|float|0.0|1|2
diffuse|float|0.0|0.3|2
specular|float|0.0|0.25|1
shininess|float|0.01|10.0|30
edgeThresh|float|0.0|0.01|1
edgeExp|float|0.0|0.15|1
boundExp|float|0.0|0.0|3
xray|float|0.0|1|1
singlePass|set|1|1|1
Single-pass volume rendering inspired by Philip Rideout|note
//vert
varying vec4 vPosition;
void main() {
	gl_TexCoord[1] = gl_MultiTexCoord1;
	gl_Position = ftransform();
	vPosition = gl_Position;
}
//frag
uniform int loops;
uniform float stepSize, sliceSize; //sliceSize = 1.0/(float(loops)/2.2);
uniform sampler3D intensityVol, gradientVol;
uniform vec3 clearColor,lightPosition, clipPlane;
uniform float clipPlaneDepth;
uniform float ambient, diffuse, specular, shininess, edgeThresh, edgeExp, boundExp, xray;
varying vec4 vPosition;
#ifdef CUBIC_FILTER
uniform vec3 textureSize;

vec4 texture3Df(sampler3D vol, vec3 coord) {
/* License applicable to this function:
Copyright (c) 2008-2013, Danny Ruijters. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
*  Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
*  Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
*  Neither the name of the copyright holders nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied.

When using this code in a scientific project, please cite one or all of the
following papers:
*  Daniel Ruijters and Philippe Th√©venaz,
   GPU Prefilter for Accurate Cubic B-Spline Interpolation,
   The Computer Journal, vol. 55, no. 1, pp. 15-20, January 2012.
*  Daniel Ruijters, Bart M. ter Haar Romeny, and Paul Suetens,
   Efficient GPU-Based Texture Interpolation using Uniform B-Splines,
   Journal of Graphics Tools, vol. 13, no. 4, pp. 61-69, 2008.
*/
  // shift the coordinate from [0,1] to [-0.5, textureSize-0.5]
  //vec3 textureSize = uResolution; //textureSize3D(tex, 0));
  //vec3 textureSize = textureSize3D(vol, 0);

  vec3 coord_grid = coord * textureSize - 0.5;
  vec3 index = floor(coord_grid);
  vec3 fraction = coord_grid - index;
  vec3 one_frac = 1.0 - fraction;

  vec3 w0 = 1.0/6.0 * one_frac*one_frac*one_frac;
  vec3 w1 = 2.0/3.0 - 0.5 * fraction*fraction*(2.0-fraction);
  vec3 w2 = 2.0/3.0 - 0.5 * one_frac*one_frac*(2.0-one_frac);
  vec3 w3 = 1.0/6.0 * fraction*fraction*fraction;

  vec3 g0 = w0 + w1;
  vec3 g1 = w2 + w3;
  vec3 mult = 1.0 / textureSize;
  vec3 h0 = mult * ((w1 / g0) - 0.5 + index);  //h0 = w1/g0 - 1, move from [-0.5, textureSize-0.5] to [0,1]
  vec3 h1 = mult * ((w3 / g1) + 1.5 + index);  //h1 = w3/g1 + 1, move from [-0.5, textureSize-0.5] to [0,1]

  // fetch the eight linear interpolations
  // weighting and fetching is interleaved for performance and stability reasons
  vec4 tex000 =  texture3D(vol,h0);
  vec4 tex100 =  texture3D(vol,vec3(h1.x, h0.y, h0.z));
  tex000 = mix(tex100, tex000, g0.x);  //weigh along the x-direction
  vec4 tex010 =  texture3D(vol,vec3(h0.x, h1.y, h0.z));
  vec4 tex110 =  texture3D(vol,vec3(h1.x, h1.y, h0.z));
  tex010 = mix(tex110, tex010, g0.x);  //weigh along the x-direction
  tex000 = mix(tex010, tex000, g0.y);  //weigh along the y-direction
  vec4 tex001 =  texture3D(vol,vec3(h0.x, h0.y, h1.z));
  vec4 tex101 =  texture3D(vol,vec3(h1.x, h0.y, h1.z));
  tex001 = mix(tex101, tex001, g0.x);  //weigh along the x-direction
  vec4 tex011 =  texture3D(vol,vec3(h0.x, h1.y, h1.z));
  vec4 tex111 =  texture3D(vol,h1);
  tex011 = mix(tex111, tex011, g0.x);  //weigh along the x-direction
  tex001 = mix(tex011, tex001, g0.y);  //weigh along the y-direction
  return mix(tex001, tex000, g0.z);  //weigh along the z-direction
}
#else //CUBIC_FILTER
vec4 texture3Df(sampler3D vol, vec3 coord) {
	return texture3D(vol, coord); //trilinear interpolation
}
#endif

vec3 GetBackPosition (vec3 startPosition) { //when does ray exit unit cube http://prideout.net/blog/?p=64
	//https://github.com/almarklein/visvis/blob/master/core/shaders_3.py
	// Calculate ray. In projective view the result is ok at the vertices
	// but in between there can be all kind of non-linear bending of the
	// rays. To solve this, one should use a denser grid of vertex-texture
	// pairs. In textures.py, this is done by partitioning the quads.
	// Get location of vertex in device coordinates
	//float w = max(1.0, vPosition.w);
	vec4 refPos1 = vPosition * vPosition.w;
	// Calculate point right behind it. Distance depends on w-value
	// to prevent wobly artifacts at low field of views.
	float zdist = max(1.0, vPosition.w/10.0);
	zdist *= vPosition.z/abs(vPosition.z); //required for orthographic
	vec4 refPos2 = refPos1 + vec4(0.0, 0.0, zdist, 0.0);
	// Project back to world coordinates to calculate ray direction
	// Note: gl_ModelViewProjectionMatrixInverse does not work on Mac OSX
	vec4 p1 = gl_ModelViewMatrixInverse * gl_ProjectionMatrixInverse * refPos1;
	vec4 p2 = gl_ModelViewMatrixInverse * gl_ProjectionMatrixInverse * refPos2;
	vec3 rayDir = normalize((p1.xyz/p1.w)-(p2.xyz/p2.w) );
	//if (vPosition.z < 0.0 ) rayDir = -rayDir; //orthographic flips Z?
	//for orthographic projections, all the previous code can be replaced with:
	// vec3 rayDir =  normalize(gl_ModelViewProjectionMatrixInverse * vec4(0.0,0.0,1.0,0.0)).xyz;
	//alternatively, for orthographic projections, compute rayDir on the CPU and send as a uniform, as it is identical for all fragments
	vec3 invR = 1.0 / rayDir;
	vec3 tbot = invR * (vec3(0.0)-startPosition);
	vec3 ttop = invR * (vec3(1.0)-startPosition);
	vec3 tmax = max(ttop, tbot);
	vec2 t = min(tmax.xx, tmax.yz);
	return startPosition + (rayDir * min(t.x, t.y));
}
void main() {
	// starting position of the ray is stored in the texture coordinate
	vec3 start = gl_TexCoord[1].xyz;
	//vec3 backPosition = texture2D(backFace,pixelCoord).xyz;
	vec3 backPosition = GetBackPosition(start); //determine where ray leaves volume
	vec3 dir = backPosition - start;
	float len = length(dir);
	dir = normalize(dir);
	//next see if clip plane intersects ray
	if (clipPlaneDepth > -0.5) {
		gl_FragColor.rgb = vec3(1.0,0.0,0.0);
		//next, see if clip plane faces viewer
		bool frontface = (dot(dir , clipPlane) > 0.0);
		//next, distance from ray origin to clip plane
		float dis = dot(dir,clipPlane);
		if (dis != 0.0  )  dis = (-clipPlaneDepth - dot(clipPlane, start.xyz-0.5)) / dis;
		//we set "len = 0.0"  instead of "discard" or "return": return fails on 2006MacBookPro10.4ATI1900, discard fails on MacPro10.5NV8800 will not discard
		if ((frontface) && (dis >= len)) len = 0.0;
		if ((!frontface) && (dis <= 0.0)) len = 0.0;
		if ((dis > 0.0) && (dis < len)) {
			if (frontface) {
				start = start + dir * dis;
			} else {
				backPosition =  start + dir * (dis);
			}
			dir = backPosition - start;
			len = length(dir);
			dir = normalize(dir);
		}
	}

	vec3 deltaDir = dir * stepSize;
	vec4 colorSample,gradientSample,colAcc = vec4(0.0,0.0,0.0,0.0);
	float lengthAcc = 0.0;
	//We need to calculate the ray's starting position. We add a random
	//fraction of the stepsize to the original starting point to dither the output
	vec3 samplePos = start.xyz + deltaDir* (fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453));
	//float specularColor = 1.0; //pure white, for red... vec3 specularColor= vec3(1.0,0.0,0.0);
	vec4 prevNorm = vec4(0.0,0.0,0.0,0.0);
	vec3 lightDirHeadOn =  normalize(gl_ModelViewMatrixInverse * vec4(0.0,0.0,1.0,0.0)).xyz ;
	float stepSizex2 = sliceSize * 2.0;
	for(int i = 0; i < loops; i++) {
		colorSample = texture3Df(intensityVol,samplePos);
		if ((lengthAcc <= stepSizex2) && (colorSample.a > 0.01) )  colorSample.a = sqrt(colorSample.a); //opaque clipping surface
		colorSample.a = 1.0-pow((1.0 - colorSample.a), stepSize/sliceSize);//opacity correction
		if ((colorSample.a > 0.01) && (lengthAcc > stepSizex2)  ) {
			gradientSample= texture3Df(gradientVol,samplePos); //interpolate gradient direction and magnitude
			//gradientSample.rgb = normalize(gradientSample.rgb*2.0 - 1.0); //direction saved as 0..1, rescale to -1..1
			gradientSample.rgb = gradientSample.rgb*2.0 - 1.0; //do not normalize due to vec3(0.0,0.0,0.0)
			//re-use previous normal if it has larger magnitude
			if (gradientSample.a < prevNorm.a)
				gradientSample.rgb = prevNorm.rgb;
			prevNorm = gradientSample;
			//Edge shading - darken edges parallel with viewing direction
			float lightNormDot = dot(gradientSample.rgb, lightDirHeadOn); //with respect to viewer
			float edgeVal = pow(1.0-abs(lightNormDot),edgeExp);
			edgeVal = edgeVal * pow(gradientSample.a,0.3);
	    	if (edgeVal >= edgeThresh)
				colorSample.rgb = mix(colorSample.rgb, vec3(0.0,0.0,0.0), pow((edgeVal-edgeThresh)/(1.0-edgeThresh),4.0));
			//see page 366 of "real-time volume graphiscs", slow: rays rarely have fulfill early termination
			if (boundExp > 0.0)
				colorSample.a = colorSample.a * pow(gradientSample.a,boundExp)*pow(1.0-abs(lightNormDot),6.0);
			lightNormDot = dot(gradientSample.rgb, lightPosition); //with respect to light location
			vec3 a = colorSample.rgb * ambient;
			vec3 d = max(lightNormDot, 0.0) * colorSample.rgb * diffuse;
			float s =   specular * pow(max(dot(reflect(lightPosition, gradientSample.rgb), dir), 0.0), shininess);
			colorSample.rgb = a + d + s;
		}
		colorSample.a *= xray;
		colorSample.rgb *= colorSample.a;
		//accumulate color
		colAcc= (1.0 - colAcc.a) * colorSample + colAcc;
		samplePos += deltaDir;
		lengthAcc += stepSize;
		// terminate if opacity > 1 or the ray is outside the volume
		if ( lengthAcc >= len || colAcc.a > 0.95 )
			break;
	}
	colAcc.a = colAcc.a/0.95;
	if ( colAcc.a < 1.0 )
		colAcc.rgb = mix(clearColor,colAcc.rgb,colAcc.a);
	if (len == 0.0) colAcc.rgb = clearColor;
	gl_FragColor = colAcc;
}