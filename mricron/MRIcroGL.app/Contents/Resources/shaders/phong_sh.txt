//pref
occlusion|float|0.0|0.5|1.0
diffuse|float|0.0|1.7|3.0
specular|float|0.0|0.3|1.0
shininess|float|0.5|15.0|30
boundExp|float|0.0|0.0|3
Phong with Spherical Harmonic (SH) lighting, developed by Martins Upitis.|note
//frag
uniform int loops;
uniform float stepSize, sliceSize, viewWidth, viewHeight;
uniform sampler3D intensityVol; //3DTexture containing brightness
uniform sampler3D gradientVol; //3DTexture containing gradient direction and magnitude
uniform sampler2D backFace;
uniform vec3 clearColor,lightPosition, clipPlane;
uniform float clipPlaneDepth;
uniform float occlusion,diffuse,specular,shininess, boundExp;
#ifdef CUBIC_FILTER
uniform vec3 textureSize;

vec4 texture3Df(sampler3D vol, vec3 coord) {
/* License applicable to this function:
Copyright (c) 2008-2013, Danny Ruijters. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
*  Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
*  Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
*  Neither the name of the copyright holders nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied.

When using this code in a scientific project, please cite one or all of the
following papers:
*  Daniel Ruijters and Philippe ThÃ©venaz,
   GPU Prefilter for Accurate Cubic B-Spline Interpolation,
   The Computer Journal, vol. 55, no. 1, pp. 15-20, January 2012.
*  Daniel Ruijters, Bart M. ter Haar Romeny, and Paul Suetens,
   Efficient GPU-Based Texture Interpolation using Uniform B-Splines,
   Journal of Graphics Tools, vol. 13, no. 4, pp. 61-69, 2008.
*/
  // shift the coordinate from [0,1] to [-0.5, textureSize-0.5]
  //vec3 textureSize = uResolution; //textureSize3D(tex, 0));
  //vec3 textureSize = textureSize3D(vol, 0);

  vec3 coord_grid = coord * textureSize - 0.5;
  vec3 index = floor(coord_grid);
  vec3 fraction = coord_grid - index;
  vec3 one_frac = 1.0 - fraction;

  vec3 w0 = 1.0/6.0 * one_frac*one_frac*one_frac;
  vec3 w1 = 2.0/3.0 - 0.5 * fraction*fraction*(2.0-fraction);
  vec3 w2 = 2.0/3.0 - 0.5 * one_frac*one_frac*(2.0-one_frac);
  vec3 w3 = 1.0/6.0 * fraction*fraction*fraction;

  vec3 g0 = w0 + w1;
  vec3 g1 = w2 + w3;
  vec3 mult = 1.0 / textureSize;
  vec3 h0 = mult * ((w1 / g0) - 0.5 + index);  //h0 = w1/g0 - 1, move from [-0.5, textureSize-0.5] to [0,1]
  vec3 h1 = mult * ((w3 / g1) + 1.5 + index);  //h1 = w3/g1 + 1, move from [-0.5, textureSize-0.5] to [0,1]

  // fetch the eight linear interpolations
  // weighting and fetching is interleaved for performance and stability reasons
  vec4 tex000 =  texture3D(vol,h0);
  vec4 tex100 =  texture3D(vol,vec3(h1.x, h0.y, h0.z));
  tex000 = mix(tex100, tex000, g0.x);  //weigh along the x-direction
  vec4 tex010 =  texture3D(vol,vec3(h0.x, h1.y, h0.z));
  vec4 tex110 =  texture3D(vol,vec3(h1.x, h1.y, h0.z));
  tex010 = mix(tex110, tex010, g0.x);  //weigh along the x-direction
  tex000 = mix(tex010, tex000, g0.y);  //weigh along the y-direction
  vec4 tex001 =  texture3D(vol,vec3(h0.x, h0.y, h1.z));
  vec4 tex101 =  texture3D(vol,vec3(h1.x, h0.y, h1.z));
  tex001 = mix(tex101, tex001, g0.x);  //weigh along the x-direction
  vec4 tex011 =  texture3D(vol,vec3(h0.x, h1.y, h1.z));
  vec4 tex111 =  texture3D(vol,h1);
  tex011 = mix(tex111, tex011, g0.x);  //weigh along the x-direction
  tex001 = mix(tex011, tex001, g0.y);  //weigh along the y-direction
  return mix(tex001, tex000, g0.z);  //weigh along the z-direction
}
#else //CUBIC_FILTER
vec4 texture3Df(sampler3D vol, vec3 coord) {
	return texture3D(vol, coord); //trilinear interpolation
}
#endif

const vec3 lightColor = vec3(0.94,0.94,0.74);//sunlight
const vec3 materialColor = vec3(1.0,0.5,0.5);
//const vec3 lightColor = vec3(1.0, 1.0, 1.0);//pure white
//const vec3 materialColor = vec3(1.0,1.0,1.0);


//Spherical harmonics constants
const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;


//SH Coefficients for Kitchen
/*const vec3 L00  = vec3( 1.734544, 1.556294, 1.439345);
const vec3 L1m1 = vec3( 0.338957, 0.474754, 0.430223);
const vec3 L10  = vec3(-0.158125,-0.081117, 0.079266);
const vec3 L11  = vec3(-0.093501, 0.010596, 0.133635);
const vec3 L2m2 = vec3(-0.087476,-0.086387,-0.072157);
const vec3 L2m1 = vec3(-0.190691,-0.144194,-0.059567);
const vec3 L20  = vec3( 0.148483, 0.281598, 0.420320);
const vec3 L21  = vec3(-0.127079, 0.000459, 0.124372);
const vec3 L22  = vec3(-0.201219,-0.038875, 0.136428);*/
// Constants for Old Town Square lighting
const vec3 L00 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L1m1 = vec3( 0.175058, 0.245335, 0.312891);
const vec3 L10 = vec3( 0.034675, 0.036107, 0.037362);
const vec3 L11 = vec3(-0.004629, -0.029448, -0.048028);
const vec3 L2m2 = vec3(-0.120535, -0.121160, -0.117507);
const vec3 L2m1 = vec3( 0.003242, 0.003624, 0.007511);
const vec3 L20 = vec3(-0.028667, -0.024926, -0.020998);
const vec3 L21 = vec3(-0.077539, -0.086325, -0.091591);
const vec3 L22 = vec3(-0.161784, -0.191783, -0.219152);

vec3 SH(vec3 vNormal)
{
	vNormal = vec3(vNormal.x,vNormal.z,-vNormal.y);
	vec3 diffuseColor =  C1 * L22 * (vNormal.x * vNormal.x - vNormal.y * vNormal.y) +
                    C3 * L20 * vNormal.z * vNormal.z +
                    C4 * L00 -
                    C5 * L20 +
                    2.0 * C1 * L2m2 * vNormal.x * vNormal.y +
                    2.0 * C1 * L21  * vNormal.x * vNormal.z +
                    2.0 * C1 * L2m1 * vNormal.y * vNormal.z +
                    2.0 * C2 * L11  * vNormal.x +
                    2.0 * C2 * L1m1 * vNormal.y +
                    2.0 * C2 * L10  * vNormal.z;
    return diffuseColor;
}

//Lighting, Phong Model
//N=surfacenormal, V=view direction, L=lightsource
vec3 shading(vec3 N, vec3 V, vec3 L)
{
	vec3 final_color = vec3(0.0,0.0,0.0);
	float lambertTerm = dot(N,L);
	if(lambertTerm > 0.0)
	{
		vec3 E = normalize(V);
		vec3 R = reflect(-L, N);
		final_color += lightColor * materialColor * lambertTerm * diffuse;
		float specularTerm = pow( max(dot(R, E), 0.0), shininess );
		final_color += lightColor * specularTerm * specular;
	}
	return final_color;
}

void main() {
	// get normalized pixel coordinate in view port (e.g. [0,1]x[0,1])
	vec2 pixelCoord = gl_FragCoord.st;
	pixelCoord.x /= viewWidth;
	pixelCoord.y /= viewHeight;
	// starting position of the ray is stored in the texture coordinate
	vec3 start = gl_TexCoord[1].xyz;
	vec3 backPosition = texture2D(backFace,pixelCoord).xyz;
	vec3 dir = backPosition - start;
	float len = length(dir);
	dir = normalize(dir);
	//next see if clip plane intersects ray
	if (clipPlaneDepth > -0.5) {
		gl_FragColor.rgb = vec3(1.0,0.0,0.0);
		//next, see if clip plane faces viewer
		bool frontface = (dot(dir , clipPlane) > 0.0);
		//next, distance from ray origin to clip plane
		float dis = dot(dir,clipPlane);
		if (dis != 0.0  )  dis = (-clipPlaneDepth - dot(clipPlane, start.xyz-0.5)) / dis;
		//we set "len = 0.0"  instead of "discard" or "return": return fails on 2006MacBookPro10.4ATI1900, discard fails on MacPro10.5NV8800 will not discard
		if ((frontface) && (dis >= len)) len = 0.0;
		if ((!frontface) && (dis <= 0.0)) len = 0.0;
		if ((dis > 0.0) && (dis < len)) {
			if (frontface) {
				start = start + dir * dis;
			} else {
				backPosition =  start + dir * (dis);
			}
			dir = backPosition - start;
			len = length(dir);
			dir = normalize(dir);
		}
	}
	vec3 deltaDir = dir * stepSize;
	vec4 colorSample,gradientSample,colAcc = vec4(0.0,0.0,0.0,0.0);
	float lengthAcc = 0.0;
	//We need to calculate the ray's starting position. We add a random
	//fraction of the stepsize to the original starting point to dither the output
	vec3 samplePos = start.xyz + deltaDir* (fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453));
	vec4 prevNorm = vec4(0.0,0.0,0.0,0.0);
	float stepSizex2 = sliceSize * 2.0;
	for(int i = 0; i < loops; i++) {
		colorSample = texture3Df(intensityVol,samplePos);
		if ((lengthAcc <= stepSizex2) && (colorSample.a > 0.01) )  colorSample.a = sqrt(colorSample.a); //opaque clipping surface
		colorSample.a = 1.0-pow((1.0 - colorSample.a), stepSize/sliceSize);//opacity correction
		if ((colorSample.a > 0.01) && (lengthAcc > stepSizex2)  ) {
			gradientSample= texture3Df(gradientVol,samplePos); //interpolate gradient direction and magnitude
			//gradientSample.rgb = normalize(gradientSample.rgb*2.0 - 1.0); //direction saved as 0..1, rescale to -1..1
			gradientSample.rgb = gradientSample.rgb*2.0 - 1.0; //avoid normalize(0,0,0)
			//re-use previous normal if it has larger magnitude
			if (gradientSample.a < prevNorm.a)
				gradientSample.rgb = prevNorm.rgb;
			prevNorm = gradientSample;

		  	vec3 n = reflect(lightPosition, gradientSample.rgb);
		  	colorSample.rgb +=   specular *  pow(max(dot(n, dir), 0.0), shininess);
			colorSample.rgb *= SH(-n  )* diffuse;

		  if (boundExp > 0.0)
			colorSample.a = colorSample.a * pow(gradientSample.a,boundExp);
		}

		colorSample.rgb *= colorSample.a;
		//accumulate color
		colAcc= (1.0 - colAcc.a) * colorSample + colAcc;
		samplePos += deltaDir;
		lengthAcc += stepSize;
		// terminate if opacity > 1 or the ray is outside the volume
		if ( lengthAcc >= len || colAcc.a > 0.95 )
			break;
	}
	colAcc.a = colAcc.a/0.95;
	if ( colAcc.a < 1.0 )
		colAcc.rgb = mix(clearColor,colAcc.rgb,colAcc.a);
	if (len == 0.0) colAcc.rgb = clearColor;
	gl_FragColor = colAcc;
}